/**
 * This file is part of Aion-Lightning <aion-lightning.org>.
 *
 *  Aion-Lightning is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Aion-Lightning is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details. *
 *  You should have received a copy of the GNU General Public License
 *  along with Aion-Lightning.
 *  If not, see <http://www.gnu.org/licenses/>.
 */


package instance;

import java.util.List;
import java.util.Map;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicInteger;

import com.aionemu.commons.utils.Rnd;
import com.aionemu.gameserver.controllers.effect.PlayerEffectController;
import com.aionemu.gameserver.instance.handlers.GeneralInstanceHandler;
import com.aionemu.gameserver.instance.handlers.InstanceID;
import com.aionemu.gameserver.model.DescriptionId;
import com.aionemu.gameserver.model.EmotionType;
import com.aionemu.gameserver.model.actions.NpcActions;
import com.aionemu.gameserver.model.gameobjects.Creature;
import com.aionemu.gameserver.model.gameobjects.Npc;
import com.aionemu.gameserver.model.gameobjects.StaticDoor;
import com.aionemu.gameserver.model.gameobjects.player.Player;
import com.aionemu.gameserver.model.instance.InstanceScoreType;
import com.aionemu.gameserver.model.instance.instancereward.EternalBastionReward;
import com.aionemu.gameserver.model.instance.playerreward.EternalBastionPlayerReward;
import com.aionemu.gameserver.model.instance.playerreward.InstancePlayerReward;
import com.aionemu.gameserver.network.aion.serverpackets.SM_DIE;
import com.aionemu.gameserver.network.aion.serverpackets.SM_EMOTION;
import com.aionemu.gameserver.network.aion.serverpackets.SM_INSTANCE_SCORE;
import com.aionemu.gameserver.network.aion.serverpackets.SM_SYSTEM_MESSAGE;
import com.aionemu.gameserver.services.abyss.AbyssPointsService;
import com.aionemu.gameserver.services.item.ItemService;
import com.aionemu.gameserver.services.teleport.TeleportService2;
import com.aionemu.gameserver.skillengine.SkillEngine;
import com.aionemu.gameserver.utils.PacketSendUtility;
import com.aionemu.gameserver.utils.ThreadPoolManager;
import com.aionemu.gameserver.world.WorldMapInstance;
import com.aionemu.gameserver.world.knownlist.Visitor;

/**
 * @author Eloann
 */
@InstanceID(300540000)
public class TheEternalBastionInstance extends GeneralInstanceHandler {

    private long startTime;
    private Future<?> instanceTimer;
    @SuppressWarnings("unused")
    private boolean isInstanceDestroyed;
    private Map<Integer, StaticDoor> doors;
    private EternalBastionReward instanceReward;
    private final AtomicInteger specNpcKilled = new AtomicInteger();

    protected EternalBastionPlayerReward getPlayerReward(Player player) {
        Integer object = player.getObjectId();
        if (instanceReward.getPlayerReward(object) == null) {
            addPlayerToReward(player);
        }
        return (EternalBastionPlayerReward) instanceReward.getPlayerReward(object);
    }

    private void addPlayerToReward(Player player) {
        instanceReward.addPlayerReward(new EternalBastionPlayerReward(player.getObjectId()));
    }

    private boolean containPlayer(Integer object) {
        return instanceReward.containPlayer(object);
    }

    @Override
    public void onDie(Npc npc) {
        int points = 0;
        int npcId = npc.getNpcId();
        Player player = npc.getAggroList().getMostPlayerDamage();
        switch (npc.getObjectTemplate().getTemplateId()) {
            case 230782: //The Eternal Bastion Barricade.
                despawnNpc(npc);
                break;
            case 233313:
                points = 20;
                break;
            case 231115:
            case 231116:
            case 233309:
                points = 33;
                break;
            case 233312:
            case 233314:
            case 233315:
                points = 36;
                break;
            case 231117:
            case 231118:
            case 231119:
            case 231120:
            case 231123:
            case 231124:
            case 231125:
            case 231126:
            case 231127:
            case 231128:
            case 233310:
            case 233311:
                points = 42;
                break;
            case 231149:
            case 231181:
                points = 266;
                break;
            case 230784:
            case 230785:
            case 231137:
            case 231138:
            case 231143:
            case 231144:
            case 231148:
            case 231151:
            case 231152:
            case 231153:
            case 231154:
            case 231155:
            case 231156:
            case 231157:
            case 231179:
                points = 334;
                break;
            case 230744:
            case 230745:
            case 230746: //Pashid Assault Tribuni Sentry.
            case 230749:
            case 230753:
            case 230754:
            case 230756:
            case 230757:
            case 231131:
            case 231132:
            case 231177: //Deathbringer Tariksha.
                points = 1002;
                break;
            case 231168:
            case 231169:
            case 231170:
            case 231171:
            case 231172:
            case 231173:
            case 231174:
            case 231175:
            case 231176:
            case 231178:
            case 231180:
                points = 1880;
                break;
            case 231133:
                points = 17988;
                break;
        }
        if (instanceReward.getInstanceScoreType().isStartProgress()) {
            instanceReward.addNpcKill();
            instanceReward.addPoints(points);
            sendPacket(npc.getObjectTemplate().getNameId(), points);
        }
        switch (npcId) {
            case 231180: //Signal Tower 1.
            case 231148: //Signal Tower 2.
                int killedCount = specNpcKilled.incrementAndGet();
                if (killedCount == 2) {
                    doors.get(311).setOpen(true);
                    spawn(231133, 744.06085f, 293.31564f, 233.70102f, (byte) 104); //First Boss.
                }
                break;
            case 231130: //Boss Rank S.
                stopInstance(player);
                spawn(701913, 748.9873f, 287.39468f, 233.7552f, (byte) 103); //Chest Rank S.
                spawn(730871, 767.10693f, 264.60303f, 233.49748f, (byte) 43); //The Eternal Bastion Exit.
                spawn(801268, 749.9885f, 331.03287f, 233.81584f, (byte) 96); //The Eternal Bastion Chest.
                spawn(801269, 752.59454f, 328.0232f, 233.81583f, (byte) 73); //The Eternal Bastion Chest.
                break;
        }
    }

    @Override
    public void handleUseItemFinish(Player player, Npc npc) {
        switch (npc.getNpcId()) {
            case 701596:
            case 701597:
            case 701598:
            case 701599:
            case 701600:
            case 701601:
            case 701602:
            case 701603:
            case 701604:
            case 701605:
            case 701606:
            case 701607: //The Eternal Bastion Defence Weapon Elyos.
                SkillEngine.getInstance().getSkill(npc, 21434, 60, player).useNoAnimationSkill();
                despawnNpc(npc);
                break;
            case 701610:
            case 701611:
            case 701612:
            case 701613:
            case 701614:
            case 701615:
            case 701616:
            case 701617:
            case 701618:
            case 701619:
            case 701620:
            case 701621: //The Eternal Bastion Defence Weapon Asmodians.
                SkillEngine.getInstance().getSkill(npc, 21435, 60, player).useNoAnimationSkill();
                despawnNpc(npc);
                break;
            case 701624: //The Eternal Bastion Tank.
                SkillEngine.getInstance().getSkill(npc, 21141, 60, player).useNoAnimationSkill();
                NpcActions.scheduleRespawn(npc);
                despawnNpc(npc);
                break;
            case 701625: //The Eternal Bastion Turet Elyos.
                SkillEngine.getInstance().getSkill(npc, 21065, 60, player).useNoAnimationSkill();
                despawnNpc(npc);
                break;
            case 701922: //The Eternal Bastion Turet Asmodians.
                SkillEngine.getInstance().getSkill(npc, 21066, 60, player).useNoAnimationSkill();
                despawnNpc(npc);
                break;
            case 831330: //The Eternal Bastion Bomb.
                SkillEngine.getInstance().getSkill(npc, 21272, 60, player).useNoAnimationSkill();
                despawnNpc(npc);
                break;
        }
    }

    private void addEternalBastionDefence(Player player) {
        switch (player.getRace()) {
            case ELYOS: //The Eternal Bastion Defence Weapon Elyos.
                spawn(701596, 617.95416f, 248.32031f, 235.74449f, (byte) 63);
                spawn(701597, 613.11914f, 275.30057f, 235.74294f, (byte) 64);
                spawn(701598, 616.4774f, 313.85846f, 235.74289f, (byte) 52);
                spawn(701599, 625.97675f, 339.55414f, 235.7432f, (byte) 54);
                spawn(701600, 651.3247f, 373.3068f, 238.60867f, (byte) 44);
                spawn(701601, 678.08124f, 396.04736f, 238.63474f, (byte) 43);
                spawn(701602, 710.27765f, 409.9322f, 241.02042f, (byte) 31);
                spawn(701603, 737.3579f, 413.3636f, 241.02278f, (byte) 33);
                spawn(701604, 772.7887f, 410.0723f, 241.02089f, (byte) 6);
                spawn(701605, 798.2277f, 400.5876f, 241.02304f, (byte) 38);
                spawn(701606, 709.54443f, 313.67133f, 254.21622f, (byte) 103);
                spawn(701607, 726.6982f, 328.01038f, 254.21628f, (byte) 103);
                spawn(701625, 640.8445f, 412.9476f, 243.93938f, (byte) 103);
                break;
            case ASMODIANS: //The Eternal Bastion Defence Weapon Asmodians.
                spawn(701610, 617.95416f, 248.32031f, 235.74449f, (byte) 63);
                spawn(701611, 613.11914f, 275.30057f, 235.74294f, (byte) 64);
                spawn(701612, 616.4774f, 313.85846f, 235.74289f, (byte) 52);
                spawn(701613, 625.97675f, 339.55414f, 235.7432f, (byte) 54);
                spawn(701614, 651.3247f, 373.3068f, 238.60867f, (byte) 44);
                spawn(701615, 678.08124f, 396.04736f, 238.63474f, (byte) 43);
                spawn(701616, 710.27765f, 409.9322f, 241.02042f, (byte) 31);
                spawn(701617, 737.3579f, 413.3636f, 241.02278f, (byte) 33);
                spawn(701618, 772.7887f, 410.0723f, 241.02089f, (byte) 6);
                spawn(701619, 798.2277f, 400.5876f, 241.02304f, (byte) 38);
                spawn(701620, 709.54443f, 313.67133f, 254.21622f, (byte) 103);
                spawn(701621, 726.6982f, 328.01038f, 254.21628f, (byte) 103);
                spawn(701922, 640.8445f, 412.9476f, 243.93938f, (byte) 103);
                break;
        }
    }

    private void removeEffects(Player player) {
        PlayerEffectController effectController = player.getEffectController();
        effectController.removeEffect(21065);
        effectController.removeEffect(21066);
        effectController.removeEffect(21138);
        effectController.removeEffect(21139);
        effectController.removeEffect(21141);
    }

    @Override
    public void onLeaveInstance(Player player) {
        removeEffects(player);
    }

    private int getTime() {
        long result = System.currentTimeMillis() - startTime;
        if (result < 40000) { //40 Secondes.
            return (int) (40000 - result);
        } else if (result < 18000000) { //5 Heures.
            return (int) (18000000 - (result - 40000)); //40 Secondes.
        }
        return 0;
    }

    private void sendPacket(final int nameId, final int point) {
        instance.doOnAllPlayers(new Visitor<Player>() {
            @Override
            public void visit(Player player) {
                if (nameId != 0) {
                    PacketSendUtility.sendPacket(player, new SM_SYSTEM_MESSAGE(1400237, new DescriptionId(nameId * 2 + 1), point));
                }
                PacketSendUtility.sendPacket(player, new SM_INSTANCE_SCORE(getTime(), instanceReward, null));
            }
        });
    }

    private int checkRank(int totalPoints) {
        int rank = 0;
        if (totalPoints > 90000) { //Rank S.
            rank = 1;
            spawn(231130, 744.06085f, 293.31564f, 233.70102f, (byte) 104); //Boss Rank S.
        } else if (totalPoints > 82000) { //Rank A.
            rank = 2;
            spawn(701914, 748.9873f, 287.39468f, 233.7552f, (byte) 103); //Chest Rank A.
        } else if (totalPoints > 60000) { //Rank B.
            rank = 3;
            spawn(701915, 748.9873f, 287.39468f, 233.7552f, (byte) 103); //Chest Rank B.
        } else if (totalPoints > 30000) { //Rank C.
            rank = 4;
            spawn(701916, 748.9873f, 287.39468f, 233.7552f, (byte) 103); //Chest Rank C.
        } else if (totalPoints > 5000) { //Rank D.
            rank = 5;
            spawn(701917, 748.9873f, 287.39468f, 233.7552f, (byte) 103); //Chest Rank D.
        } else if (totalPoints > 2000) { //Rank F.
            rank = 6;
        } else {
            rank = 8;
        }
        return rank;
    }

    protected void stopInstance(Player player) {
        stopInstanceTask();
        instanceReward.setRank(checkRank(instanceReward.getPoints()));
        instanceReward.setInstanceScoreType(InstanceScoreType.END_PROGRESS);
        doReward(player);
        sendPacket(0, 0);
    }

    private void stopInstanceTask() {
        if (instanceTimer != null) {
            instanceTimer.cancel(true);
        }
    }

    @Override
    public void doReward(Player player) {
        for (Player p : instance.getPlayersInside()) {
            InstancePlayerReward playerReward = getPlayerReward(p);
            float rewardSillus = (0.1f * instanceReward.getPoints()) / 800;
            float rewardCeramium = (0.1f * instanceReward.getPoints()) / 1200;
            float rewardAp = (playerReward.getPoints() / 15) * 2;
            if (!instanceReward.isRewarded()) {
                instanceReward.setRewarded();
                instanceReward.setScoreAP((int) rewardAp);
                AbyssPointsService.addAp(player, (int) rewardAp); //Abyss Points.
                if (instanceReward.getPoints() >= 60000) {
                    instanceReward.setSillus((int) rewardSillus);
                    ItemService.addItem(player, 186000239, (int) rewardSillus); //Sillus Crest.
                    instanceReward.setCeramium((int) rewardCeramium);
                    ItemService.addItem(player, 186000242, (int) rewardCeramium); //Ceramium Medal.
                }
                if (instanceReward.getPoints() >= 90000) {
                    instanceReward.setFavorable(1);
                    ItemService.addItem(player, 188052543, 1); //Favorable Reward Bundle.
                }
            }
        }
    }

    @Override
    public void onEnterInstance(final Player player) {
        if (!containPlayer(player.getObjectId())) {
            addPlayerToReward(player);
        }
        if (instanceTimer == null) {
            startTime = System.currentTimeMillis();
            instanceTimer = ThreadPoolManager.getInstance().schedule(new Runnable() {
                @Override
                public void run() {
                    addEternalBastionDefence(player);
                    instanceReward.setInstanceScoreType(InstanceScoreType.START_PROGRESS);
                    sendPacket(0, 0);
                }
            }, 40000); //40 Secondes.
        }
        sendPacket(0, 0);
    }

    protected void despawnNpc(Npc npc) {
        if (npc != null) {
            npc.getController().onDelete();
        }
    }

    protected void despawnNpcs(List<Npc> npcs) {
        for (Npc npc : npcs) {
            npc.getController().onDelete();
        }
    }

    @Override
    public void onInstanceDestroy() {
        if (instanceTimer != null) {
            instanceTimer.cancel(false);
        }
        isInstanceDestroyed = true;
        doors.clear();
    }

    @Override
    public void onInstanceCreate(WorldMapInstance instance) {
        super.onInstanceCreate(instance);
        instanceReward = new EternalBastionReward(mapId, instanceId);
        instanceReward.setInstanceScoreType(InstanceScoreType.PREPARING);
        doors = instance.getDoors();
        int rnd = Rnd.get(1, 2);
        switch (rnd) {
            case 1:
                spawn(230746, 552.5082f, 414.074f, 222.75688f, (byte) 17); //Pashid Assault Tribuni Sentry.
                spawn(231177, 820.55133f, 606.02814f, 239.70607f, (byte) 20); //Deathbringer Tariksha.
                break;
            case 2:
                spawn(231177, 552.5082f, 414.074f, 222.75688f, (byte) 17); //Deathbringer Tariksha.
                spawn(230746, 820.55133f, 606.02814f, 239.70607f, (byte) 20); //Pashid Assault Tribuni Sentry.
                break;
        }
    }

    @Override
    public boolean onDie(final Player player, Creature lastAttacker) {
        PacketSendUtility.broadcastPacket(player, new SM_EMOTION(player, EmotionType.DIE, 0, player.equals(lastAttacker) ? 0 : lastAttacker.getObjectId()), true);

        PacketSendUtility.sendPacket(player, new SM_DIE(player.haveSelfRezEffect(), player.haveSelfRezItem(), 0, 8));
        return true;
    }

    @Override
    public void onPlayerLogOut(Player player) {
        TeleportService2.moveToInstanceExit(player, mapId, player.getRace());
    }
}
